---
description:
  name: "Capítulo 12: Funções"
  sections:
    - title: "Síntaxe"
      text: |
        - Qual a utilidade de funções?
          - Abstrair funcionalidade
          - Reutilização de código
        - func (receiver) identifier(parameters) (returns) { code }
        - A diferença entre parâmetros e argumentos:
          - Funções são definidas com parâmetros
          - Funções são chamadas com argumentos
        - Tudo em Go é *pass by value.*
            - Pass by reference, pass by copy, ... não.
        - Parâmetro pode ser ...variádico.
        - Exemplos:
          - Função básica.
            - Go Playground: https://play.golang.org/p/FebJblBenP
          - Função que aceita um argumento.
            - Go Playground: https://play.golang.org/p/CE6Ij3U4QB
          - Função com retorno.
            - Go Playground: https://play.golang.org/p/gKxwYe6btP
          - Função com múltiplos retornos e parâmetro variádico.
            - Go Playground: https://play.golang.org/p/OcQ1wXwM2c
          - Mais um: https://play.golang.org/p/8wc2TA9xH_
    - title: "Desenrolando (enumerando) uma slice"
      text: |
        - Quando temos uma slice, podemos passar os elementos individuais através "deste..." operador.
        - Exemplos:
          - Desenrolando uma slice de ints com como argumento para a função "soma" anterior
            - Go Playground: https://play.golang.org/p/k8O3__8UDa
          - Pode-se passar *zero* ou mais valores
            - Go Playground: https://play.golang.org/p/C238I9n7Vs
          - O parâmetro variádico deve ser o parâmetro final → ref/spec#Passing_arguments_to_..._parameters
            - Go Playground: https://play.golang.org/p/8wc2TA9xH_
            - Não roda: https://play.golang.org/p/2qTAnLWfgB
    - title: Defer
      text: |
        - Funções são ótimas pois tornam nosso código modular. Podemos alterar partes do nosso programa sem afetar o resto!
        - Uma declaração defer chama uma função cuja execução ocorrerá no momento em que a função da qual ela faz parte finalizar.
        - Essa finalização pode ocorrer devido a um return, ao fim do code block da função, ou no caso de pânico em uma goroutine correspondente.
        - "Deixa pra última hora!"
        - ref/spec
        - Sempre usamos para fechar um arquivo após abri-lo.
        - Go Playground: https://play.golang.org/p/sFj8arw0E_
    - title: Métodos
      text: |
        - Um método é uma função anexada a um tipo.
        - Quando se anexa uma função a um tipo, ela se torna um método desse tipo.
        - Pode-se anexar uma função a um tipo utilizando seu receiver.
        - Utilização: valor.método()
        - Exemplo: o tipo "pessoa" pode ter um método oibomdia()
        - Go Playground: https://play.golang.org/p/tQtoqUBpY5
    - title: "Interfaces e Polimorfismo"
      text: |
        - Em Go, valores podem ter mais que um tipo.
        - Uma interface permite que um valor tenha mais que um tipo.
        - Declaração: keyword identifier type → type x interface
        - Após declarar a interface, deve-se definir os métodos necessários para implementar essa interface.
        - Se um tipo possuir todos os métodos necessários (que, no caso da interface{}, pode ser nenhum) então esse tipo implicitamente implementa a interface.
        - Esse tipo será o seu tipo *e também* o tipo da interface.
        - Exemplos:
          - Os tipos *profissão1* e *profissão2* contem o tipo *pessoa*
          - Cada um tem seu método *oibomdia()*, e podem dar oi utilizando *pessoa.oibomdia()*
          - Implementam a interface *gente*
          - Ambos podem acessar o função *serhumano()* que chama o método *oibomdia()* de cada *gente*
          - Tambem podemos no método *serhumano()* tomar ações diferentes dependendo do tipo:
              switch pessoa.(type) { case profissão1: fmt.Println(h.(profissão1).valorquesóexisteemprofissão1) [...] }*
          - Go Playground pré-pronto: https://play.golang.org/p/VLbo_1uE-U
          https://play.golang.org/p/zGKr7cvTPF
          - Go Playground ao vivo:
          https://play.golang.org/p/njiKbTT20Cr
        - Onde se utiliza?
          - Área de formas geométricas (gobyexample.com)
          - Sort
          - DB
          - Writer interface: arquivos locais, http request/response
        - Se isso estiver complicado, não se desespere. É foda mesmo. Com tempo e prática a fluência vem.
    - title: "Funções anônimas"
      text: |
        - Anonymous self-executing functions → Funções anônimas auto-executáveis.
        - func(p params) { ... }()
        - Vamos ver bastante quando falarmos de goroutines.
        - Go Playground: https://play.golang.org/p/Rnqmo6X6jh
    - title: "Funções como expressões"
      text: |
        - f := func(p params){ ... }
        - f()
        - Go Playground: https://play.golang.org/p/cPxhPUbfLy
    - title: "Retornando uma função"
      text: |
        - Pode-se usar uma função como retorno de uma função
        - Declaração: func f() return
        - Exemplo: func f() func() int { [...]; return func() int{ return [int] } }
          - ????: fmt.Println(f()())
        - Go Playground: https://play.golang.org/p/zPjoWNrCJF
    - title: "Callback"
      text: |
        - Primeiro veja se você entende isso: https://play.golang.org/p/QkAtwMZU-z
        - Callback é passar uma função como argumento.
        - Exemplo:
          - Criando uma função que retorna uma função e um []int, e usa somente os números pares como argumentos para a função.
          - Go Playground:
        - Desafio: Crie uma função no programa acima que utilize somente os números *ímpares.*
        - Solução:
    - title: "Closure"
      text: |
        - Closure é cercar ou capturar um scope para que possamos utilizá-lo em outro contexto. Já vimos:
          - Package-level scope
          - Function-level scope
          - Code-block-in-code-block scope
        - Exemplo de closure:
          - func i() func() int { x := 0; return func() int { x++; return x } }
          - Quando fizermos a := i() teremos um scope, um valor para x.
          - Quando fizermos b := i() teremos outro scope, e x terá um valor independente do x acima.
        - Closures nos permitem salvar dados entre function calls e ao mesmo tempo isolar estes dados do resto do código.
        - Go Playground: https://play.golang.org/p/AdFciYwI2Z
    - title: "Recursividade"
      text: |
        - WP: "The most common application of recursion is in mathematics and computer science, where a function being defined is applied within its own definition."
        - Exemplos de recursividade: Fractais, matrioscas, efeito Droste (o efeito produzido por uma imagem que aparece dentro dela própria), GNU (“GNU is Not Unix”), etc.
        - No estudo de funções: é uma função que chama a ela própria.
        - Exemplo: fatoriais.
          - 4! = 4 * 3 * 2 * 1 (e no zero, deu.)
          - Com recursividade. Go Playground: https://play.golang.org/p/ujsLnUhRp_
          - Com loops. Go Playground: https://play.golang.org/p/F2VsUjYVhc
