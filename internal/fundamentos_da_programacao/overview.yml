---
description:
  name: "04 - Fundamentos da Programação"
  sections:
    - title: Tipo booleano
      text: |
        - Agora vamos explorar os tipos de maneira mais detalhada. golang.org/ref/spec. A começar pelo bool.
        - O tipo bool é um tipo binário, que só pode conter um dos dois valores: true e false. (Verdadeiro ou falso, sim ou não, zero ou um, etc.)
        - Sempre que você ver operadores relacionais (==, <=, >=, !=, <, >), o resultado da expressão será um valor booleano.
        - Booleans são fundamentais nas tomadas de decisões em lógica condicional, declarações switch, declarações if, fluxo de controle, etc.
        - Na prática:
          - Zero value
          - Atribuindo um valor
          - Bool como resultado de operadores relacionais
        - Go Playground: https://play.golang.org/p/7joj615nZw
    - title: Como os computadores funcionam
      text: |
        - Isso é importante pois daqui pra frente vamos falar de ints, bytes, e etc.
        - Não é necessário um conhecimento a fundo mas é importante ter uma idéia de como as coisas funcionam por trás dos panos.
        - https://docs.google.com/presentation/d/1aVytiGOBVDMISFW-ZARJ5iFY1osU2XJIw0hQpNICXm8/
        - ASCII: https://en.wikipedia.org/wiki/ASCII
        - Filme: Alan Turing, The Immitation Game.
    - title: Tipos numéricos
      text: |
        - int vs. float: Números inteiros vs. números com frações.
        - golang.org/ref/spec → numeric types
        - Integers:
          - Números inteiros
          - int & uint → “implementation-specific sizes”
          - Todos os tipos numéricos são distintos, exceto:
            - byte = uint8
            - rune = int32 (UTF8)
            (O código fonte da linguagem Go é sempre em UTF-8).
          - Tipos são únicos
            - Go é uma linguagem estática
            - int e int32 não são a mesma coisa
            - Para "misturá-los" é necessário conversão
          - Regra geral: use somente int
        - Floating point:
          - Números racionais ou reais
          - Regra geral: use somente float64
        - Na prática:
          - Defaults com :=
          - Tipagem com var
          - Dá pra colocar número com vírgula em tipo int?
          - Overflow
          - Go Playground: https://play.golang.org/p/dt2x1ies5b
        - “implementation-specific sizes”? Runtime package. Word.
          - GOOS
          - GORUNTIME
          - https://play.golang.org/p/1vp5DImIMM
    - title: Overflow
      text: |
        - Um uint16, por exemplo, vai de 0 a 65535.
        - Que acontece se a gente tentar usar 65536?
        - Ou se a gente estiver em 65535 e tentar adicionar mais 1?
        - Playground: https://play.golang.org/p/t7Z4m127F2t
    - title: Tipo string
      text: |
        - Strings são sequencias de bytes.
        - Imutáveis.
        - Uma string é um "slice of bytes" (ou, em português, uma fatia de bytes).
        - Na prática:
          - %v %T
          - Raw string literals
          - Conversão para slice of bytes: []byte(x)
          - %#U, %#x
          - Go Playground: https://play.golang.org/p/dt2x1ies5b & https://play.golang.org/p/PpDnspiyA_7
        - https://blog.golang.org/string
    - title: Sistemas numéricos
      text: |
        - Base-10: decimal, 0–9
        - Base-2: binário, 0–1
        - Base-16: hexadecimal, 0–f
        - https://docs.google.com/document/d/1GqXpubhMMIr4Sy5xwgiPIDh5PGVmVpF2u0c9vDrvykE/
        - Demonstração em Go.
    - title: Constantes
      text: |
        - São valores imutáveis.
        - Podem ser tipadas ou não:
          - const oi = "Bom dia"
          - const oi string = "Bom dia"
        - As não tipadas só terão um tipo atribuido a elas quando forem usadas.
          - Ex. qual o tipo de 42? int? uint? float64?
          - Ou seja, é uma flexibilidade conveniente.
        - Na prática: int, float, string.
          - const x = y
          - const ( x = y )
    - title: Iota
      text: |
        - golang.org/ref/spec
        - Numa declaração de constantes, o identificador iota representa números sequenciais.
        - Na prática.
          - iota, iota + 1, a = iota b c, reinicia em cada const, _
        - Go Playground: https://play.golang.org/p/eSrwoQjuYR
    - title: Deslocamento de bits
      text: |
        - Deslocamento de bits é quando deslocamos digitos binários para a esquerda ou direita.
        - Na prática:
          - %d %b
          - x << y
          - iota * 10 << 10 = kb, mb, gb

        - https://play.golang.org/p/7MOnbhx4R4
        - https://splice.com/blog/iota-elegant-constants-golang/
        - https://medium.com/learning-the-go-programming-language/bit-hacking-with-go-e0acee258827

        - Fim da sessão. Massa!
