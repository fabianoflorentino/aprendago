title: Variáveis, Valores e Tipos
topics:
  - flag: --go-playground
    title: Go Playground
    help_me: Exibe o Go Playground.
    outline: |
      - É online, funciona sem instalar nem configurar nada.
      - Assim você pode começar a programar o mais rápido possível.
      - Mais pra frente no curso vou explicar direitinho como configurar tudo no seu computador.
      - [Go Playground](https://play.golang.org/).
        - Função share. Use para compartilhar código, por exemplo pra fazer uma pergunta em um fórum.
        - Função imports.
        - Função format.
          - Maneira idiomática: a gente fala da mesma maneira que a comunidade onde estamos.
        - Função run.

  - flag: --hello-world
    title: Hello, World!
    help_me: Exibe o Hello World.
    outline: |
      - Estrutura básica:
        - package main.
        - func main: é aqui que tudo começa, é aqui que tudo acaba.
        - import.
      - Packages:
        - Pacotes são coleções de funções pré-prontas (ou não) que você pode utilizar.
        - Notação: pacote.Identificador. Exemplo: fmt.Println()
        - Documentação: fmt.Println.
      - Variáveis: "uma variável é um objeto (uma posição na memória) capaz de reter e representar um valor ou expressão."
      - Variáveis não utilizadas? Não pode: _ nelas.
      - ...funções variádicas.
      - Lição principal: package main, func main, pacote.Identificador.

  - flag: --operador-curto-de-declaracao
    title: Operador curto de declaração
    help_me: Exibe o operador curto de declaração.
    outline: |
      - := parece uma marmota (gopher) ou o punisher.
      - Uso:
        - Tipagem automática
        - Só pode repetir se houverem variáveis novas
        - != do assignment operator (operador de atribuição)
        - Só funciona dentro de codeblocks
      - Terminologia:
        - keywords (palavras-chave) são termos reservados
        - operadores, operandos
        - statement (declaração, afirmação) → uma linha de código, uma instrução que forma uma ação, formada de expressões
        - expressão -> qualquer coisa que "produz um resultado"
        - scope (abrangência)
          - package-level scope
      - Lição principal:
        - := utilizado pra criar novas variáveis, dentro de code blocks
        - = para atribuir valores a variáveis já existentes
  
  - flag: --a-palavra-reservada-var
    title: A palavra reservada var
    help_me: Exibe a palavra reservada var.
    outline: |
      - Variável declarada em um code block é undefined em outro
      - Para variáveis com uma abrangência maior, package level scope, utilizamos "var"
      - Funciona em qualquer lugar
      - Prestar atenção: chaves, colchetes, parênteses

  - flag: --explorando-tipos
    title: Explorando tipos
    help_me: Exibe como explorar tipos.
    outline: |
      - Tipos em Go são extremamente importantes. (Veremos mais quando chegarmos em métodos e interfaces.)
      - Tipos em Go são estáticos.
      - Ao declarar uma variável para conter valores de um certo tipo, essa variável só poderá conter valores desse tipo.
      - O tipo pode ser deduzido pelo compilador:
        - x := 10
        - var y = "a tia do batima"
      - Ou pode ser declarado especificamente:
        - var w string = "isso é uma string"
        - var z int = 15
        - na declaração var z int com package scope, atribuição z = 15 no codeblock (somente)
      - Tipos de dados primitivos: disponíveis na linguagem nativamente como blocos básicos de construção
        - int, string, bool
      - Tipos de dados compostos: são tipos compostos de tipos primitivos, e criados pelo usuário
        - slice, array, struct, map
      - O ato de definir, criar, estruturar tipos compostos chama-se composição. Veremos muito disso futuramente.

  - flag: --valor-zero
    title: Valor zero
    help_me: Exibe o valor zero.
    outline: |
      - Declaração vs. inicialização vs. atribuição de valor. Variáveis: caixas postais.
      - O que é valor zero?
      - Os zeros:
        - ints: 0
        - floats: 0.0
        - booleans: false
        - strings: ""
        - pointers, functions, interfaces, slices, channels, maps: nil
      - Use := sempre que possível.
      - Use var para package-level scope.

  - flag: --o-pacote-fmt
    title: O pacote fmt
    help_me: Exibe o pacote fmt.
    outline: |
      - Setup: strings, ints, bools.
      - Strings: interpreted string literals vs. raw string literals.
        - Rune literals.
        - Em ciência da computação, um literal é uma notação para representar um valor fixo no código fonte.
      - Format printing: documentação.
        - Grupo #1: Print -> standard out
          - func Print(a ...interface{}) (n int, err error)
          - func Println(a ...interface{}) (n int, err error)
          - func Printf(format string, a ...interface{}) (n int, err error)
            - Format verbs. (%v %T)
        - Grupo #2: Print -> string, pode ser usado como variável
          - func Sprint(a ...interface{}) string
          - func Sprintf(format string, a ...interface{}) string
          - func Sprintln(a ...interface{}) string
        - Grupo #3: Print -> file, writer interface, e.g. arquivo ou resposta de servidor
          - func Fprint(w io.Writer, a ...interface{}) (n int, err error)
          - func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)
          - func Fprintln(w io.Writer, a ...interface{}) (n int, err error)

  - flag: --criando-seu-proprio-tipo
    title: Criando seu próprio tipo
    help_me: Exibe como criar seu próprio tipo.
    outline: |
      - Revisando: tipos em Go são extremamente importantes. (Veremos mais quando chegarmos em métodos e interfaces.)
      - Tem uma história que Bill Kennedy dizia que se um dia fizesse uma tattoo, ela diria "type is life."
      - Grande parte dos aspectos mais avançados de Go dependem quase que exclusivamente de tipos.
      - Como fundação para estas ferramentas, vamos aprender a declarar nossos próprios tipos.
      - Revisando: tipos são fixos. Uma vez declarada uma variável como de um certo tipo, isso é imutável.
      - type hotdog int → var b hotdog (main hotdog)
      - Uma variável de tipo hotdog não pode ser atribuida com o valor de uma variável tipo int, mesmo que este seja o tipo subjacente de hotdog.

  - flag: --conversao-nao-coercao
    title: Conversão, não coerção
    help_me: Exibe a conversão não coerção.
    outline: |
      - Conversão de tipos é o que soa.
      - Em Go não se diz casting, se diz conversion.
      - a = int(b)
      - ref/spec#Conversions
      - Fim da sessão. Parabéns! Dicas, motivação e exercícios.
