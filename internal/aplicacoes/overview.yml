---
description:
  name: "Capítulo 16: Aplicações"
  sections:
    - title: Documentação JSON
      text: |
        - Já entendemos ponteiros, já entendemos métodos. Já temos o conhecimento necessário para começar a utilizar a standard library.
        - Nesse vídeo faremos uma orientação sobre como abordar a documentação.
        - Essa aula não foi preparada. Vai ser tudo ao vivo no improviso pra vocês verem como funciona o processo.
            - golang.org → Documents → Package Documentation
            - godoc.org → encoding/json
                - files
                - examples
                - funcs
                - types
                - methods
    - title: "JSON marshal (ordenação)"
      text: |
        - Exemplo: transformando structs em Go em código JSON.
        - No improviso tambem.
        - Go Playground: https://play.golang.org/p/_JvCOlK-H9
    - title:  "JSON unmarshal (desornação)"
      text: |
        - E agora o contrário.
        - Link: https://cdn.rawgit.com/GoesToEleven/golang-web-dev/17e3852d/040_json/README.html
        - JSON-to-Go
        - Tags
        - Marshal/unmarshal vs. encoder/decoder
            - Marshal vai pra uma variável
            - Encoder "vai direto"
        - Go Playground: https://play.golang.org/p/l6wbuLu1NS
        - Com Encoder: https://play.golang.org/p/Pgwr0O07aL
    - title: A interface Writer
      text: |
        - A interface writer do pacote io.
        - type Writer interface { Write(p []byte) (n int, err error) }
            - pkg os:   func (f *File) Write(b []byte) (n int, err error)
            - pkg json: func NewEncoder(w io.Writer) *Encoder
        - "Println [...] writes to standard output."
            - func Println [...] return Fprintln(os.Stdout, a...)
            - func Fprintln(w io.Writer, a ...interface{}) (n int, err error)
            - Stdout: NewFile(uintptr(syscall.Stdout), "/dev/stdout") (Google: Standard streams)
            - func NewFile(fd uintptr, name string) *File
            - func (f *File) Write(b []byte) (n int, err error)
        - Exemplo:
            - Println
            - Fprintln os.Stdout
            - io.WriteString os.Stdout
            - Ou:
                - func Dial(network, address string) (Conn, error)
                - type Conn interface { [...] Write(b []byte) (n int, err error) [...] }
        - Go Playground:
    - title: O pacote sort
      text: |
        - Sort serve para ordenar slices.
            - Como faz?
            - golang.org/pkg/ → sort
            - godoc.org/sort → examples
            - Sort altera o valor original!
        - Exemplo: Ints, Strings.
        - Go Playground:
            - sort.Strings: https://play.golang.org/p/Rs1NVwmg7h
            - sort.Ints: https://play.golang.org/p/I2_vsHujZa
    - title: Customizando sort
      text: |
        - O sort que eu quero não existe. Quero fazer o meu.
        - Para isso podemos usar o func Sort do package sort. Vamos precisar de um sort.Interface.
            - type Interface interface { Len() int; Less(i, j int) bool; Swap(i, j int) }
        - Ou seja, se tivermos um tipo que tenha esses métodos, ao executar sort.Sort(x) as funções que vão rodar são as minhas, não as funções pré-prontas como no exercício anterior.
        - E aí posso fazer do jeito que eu quiser.
        - Exemplo:
            - struct carros: nome, consumo, potencia
            - slice []carros{carro1, carro2, carro3} (Sort ordena *slices!*)
            - tipo ordenarPorPotencia
            - tipo ordenarPorConsumo
            - tipo ordenarPorLucroProDonoDoPosto
        - Go Playground: https://play.golang.org/p/KOIhAsE3OK
    - title: bcrypt
      text: |
        - É uma maneira de encriptar senhas utilizando hashes.
        - x/crypto/bcrypt
            - GenerateFromPassword
            - CompareHashAndPassword
        - Sem Go Playground!
            - go get golang.org/x/crypto/bcrypt
        - Arquivo: https://github.com/ellenkorbes/aprendago/blob/master/c%C3%B3digo/16_aplicacao/bcrypt/main.go
